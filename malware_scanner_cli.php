<?php

set_time_limit(0);
define('SEND_EMAIL_ALERTS_TO','tofeeq3@gmail.com');
############################################ START CLASS
class phpMalCodeScan {
	public $infected_files = array();
	private $scanned_files = array();
	
	public $dir = "";
	public $qdir = "";
	public $command = "";
	public $logfile;

	function __construct($dir, $command = null) {
		$this->dir = $dir;
		$this->command = $command;
		$this->logfile = fopen($this->dir . '/scan_log.log', 'a');
		switch ($this->command) {
			case 'quarantine':
				$this->qdir = $this->dir . '/quarantine';
				if (!is_dir($this->qdir)) {
					mkdir($this->qdir, 0755, true);
				}
			break;
		}
	}
	
	
	function scan($dir = null) {
		if (!$dir) {
			$dir = $this->dir;
		}

		$this->scanned_files[] = $dir;
		$files = scandir($dir);
		
		if(!is_array($files)) {
			throw new Exception('Unable to scan directory ' . $dir . '.  Please make sure proper permissions have been set.');
		}
		
		foreach($files as $file) {


			if (($dir.'/'.$file) == $this->dir . '/quarantine') 
				continue;

			if (in_array($file, [".", ".."])) 
				continue;


			if(is_file($dir.'/'.$file) && !in_array($dir.'/'.$file,$this->scanned_files)) {
				$this->check(file_get_contents($dir.'/'.$file),$dir.'/'.$file);
			} elseif(is_dir($dir.'/'.$file) && substr($file,0,1) != '.') {
				$this->scan($dir.'/'.$file);
			}
		}

		
	}
	
	
	function check($contents,$file) {
		$log = "";

		$this->scanned_files[] = $file;
		if(preg_match('/eval\((base64|eval|\$_|\$\$|\$[A-Za-z_0-9\{]*(\(|\{|\[))/i',$contents)) {
			
			$this->infected_files[] = $file;
			$log .= "==> Infected: \n"; 
			$log .= "===> $file \n";

			switch ($this->command) {
				case 'quarantine':
					$log .= "----> moving file to quarantine... \n";
					$newPath = str_replace($this->dir, $this->qdir, $file); 
					$log .= "----> moving to " . $newPath . "\n";
					$newDir = dirname($newPath);

					if (!is_dir($newDir)) {
						mkdir($newDir, 0755, true);
					}
					
					rename($file, $newPath);
					file_put_contents($newPath, "\n\n# " . $file, FILE_APPEND);
					$log .= "----> file moved to quarantine... \n";

					fwrite($this->logfile, $log);

					echo $log;

				break;
			}
		}
		 
	}
	function sendalert() {

		fclose($this->logfile);

		if(count($this->infected_files) != 0) {
			$message = "== MALICIOUS CODE FOUND == \n\n";
			$message .= "The following files appear to be infected: \n";
			foreach($this->infected_files as $inf) {
				$message .= "  -  $inf \n";
			}

			$file = fopen($this->dir . '/infected_files.log', 'w');
			fwrite($file, $message);
			fclose($file);
			
			echo $message;
			//mail(SEND_EMAIL_ALERTS_TO,'Malicious Code Found!',$message,'FROM:');
		}
	}
}
############################################ INITIATE CLASS
ini_set('memory_limit', '-1'); ## Avoid memory errors (i.e in foreachloop)
############################################ INITIATE CLASS
$dir = "";
$command = "";

if (isset($argv[1])) {
	switch ($argv[1]) {
	 	case '.':
	 		$dir = dirname(__FILE__);
	 	break;
	 	
	 	case (strpos("..", $argv[1]) == 0):
	 		$dir = realpath(__DIR__ . '/' . $argv[1]);
	 	break;

	 	default :
	 		$dir = $argv[1];
	 	break;
	 }
}

if (isset($argv[2])) {
	$command = $argv[2];
}

if ($dir) {
	$scanner = new phpMalCodeScan($dir, $command);
	$scanner->scan();
	$scanner->sendalert();	
}
?>